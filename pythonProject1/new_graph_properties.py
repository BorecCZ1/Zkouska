#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Anal√Ωza vlastnost√≠ graf≈Ø
"""

import re
from typing import Dict, List, Set, Tuple, Optional


class Node:
    """T≈ô√≠da pro uzel grafu"""
    def __init__(self, identifier: str, weight: Optional[float] = None):
        self.identifier = identifier
        self.weight = weight
    
    def __str__(self):
        return self.identifier


class Edge:
    """T≈ô√≠da pro hranu grafu"""
    def __init__(self, from_node: str, to_node: str, directed: bool, 
                 weight: Optional[float] = None, label: Optional[str] = None):
        self.from_node = from_node
        self.to_node = to_node
        self.directed = directed
        self.weight = weight
        self.label = label
    
    def __str__(self):
        direction = ">" if self.directed else "-"
        weight_str = f" {self.weight}" if self.weight is not None else ""
        label_str = f" :{self.label}" if self.label else ""
        return f"{self.from_node} {direction} {self.to_node}{weight_str}{label_str}"


class Graph:
    """T≈ô√≠da pro graf"""
    def __init__(self):
        self.nodes: Dict[str, Node] = {}
        self.edges: List[Edge] = []
    
    def add_node(self, identifier: str, weight: Optional[float] = None):
        """P≈ôid√° uzel do grafu"""
        self.nodes[identifier] = Node(identifier, weight)
    
    def add_edge(self, from_node: str, to_node: str, directed: bool,
                 weight: Optional[float] = None, label: Optional[str] = None):
        """P≈ôid√° hranu do grafu"""
        self.edges.append(Edge(from_node, to_node, directed, weight, label))


def parse_graph_file(filename: str) -> Graph:
    """Naƒçte graf ze souboru"""
    graph = Graph()
    
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    except FileNotFoundError:
        raise FileNotFoundError(f"Soubor '{filename}' nebyl nalezen")
    except Exception as e:
        raise Exception(f"Chyba p≈ôi ƒçten√≠ souboru: {e}")
    
    for line_num, line in enumerate(lines, 1):
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        
        try:
            # Parsov√°n√≠ uzlu: u identifik√°tor [ohodnocen√≠];
            if line.startswith('u '):
                match = re.match(r'u\s+([^;]+);', line)
                if not match:
                    raise ValueError(f"Neplatn√Ω form√°t uzlu na ≈ô√°dku {line_num}")
                
                parts = match.group(1).strip().split()
                identifier = parts[0]
                weight = None
                
                if len(parts) > 1:
                    try:
                        weight = float(parts[1])
                    except ValueError:
                        raise ValueError(f"Neplatn√© ohodnocen√≠ uzlu na ≈ô√°dku {line_num}")
                
                graph.add_node(identifier, weight)
            
            # Parsov√°n√≠ hrany: h uzel1 (<|-|>) uzel2 [ohodnocen√≠] [:oznaƒçen√≠];
            elif line.startswith('h '):
                match = re.match(r'h\s+([^\s]+)\s+([<>\-])\s+([^\s]+)(?:\s+([^\s:]+))?(?:\s*:\s*([^;]+))?;', line)
                if not match:
                    raise ValueError(f"Neplatn√Ω form√°t hrany na ≈ô√°dku {line_num}")
                
                from_node = match.group(1)
                direction = match.group(2)
                to_node = match.group(3)
                weight_str = match.group(4)
                label = match.group(5)
                
                # Kontrola existence uzl≈Ø
                if from_node not in graph.nodes:
                    raise ValueError(f"Uzel '{from_node}' neexistuje na ≈ô√°dku {line_num}")
                if to_node not in graph.nodes:
                    raise ValueError(f"Uzel '{to_node}' neexistuje na ≈ô√°dku {line_num}")
                
                # Urƒçen√≠ smƒõru
                directed = direction in ['<', '>']
                
                # Parsov√°n√≠ v√°hy
                weight = None
                if weight_str:
                    try:
                        weight = float(weight_str)
                    except ValueError:
                        raise ValueError(f"Neplatn√° v√°ha hrany na ≈ô√°dku {line_num}")
                
                graph.add_edge(from_node, to_node, directed, weight, label)
            
            else:
                raise ValueError(f"Neplatn√Ω ≈ô√°dek na {line_num}: {line}")
        
        except Exception as e:
            raise Exception(f"Chyba na ≈ô√°dku {line_num}: {e}")
    
    return graph


def analyze_graph_properties(graph: Graph):
    """Analyzuje vlastnosti grafu (a-j)"""
    print(f"\nüìä Z√ÅKLADN√ç INFORMACE:")
    print(f"  Poƒçet uzl≈Ø (|V|): {len(graph.nodes)}")
    print(f"  Poƒçet hran (|E|): {len(graph.edges)}")
    print(f"  Seznam uzl≈Ø: {sorted(graph.nodes.keys())}")
    
    print(f"\n" + "="*80)
    print("ROZHODNƒöTE O N√ÅSLEDUJ√çC√çCH VLASTNOSTECH:")
    print("="*80)
    
    # a) Ohodnocen√Ω
    has_node_weights = any(node.weight is not None for node in graph.nodes.values())
    has_edge_weights = any(edge.weight is not None for edge in graph.edges)
    
    print(f"\na) OHODNOCEN√ù (v√°≈æen√Ω):")
    if has_node_weights or has_edge_weights:
        print(f"   ‚úì ANO - Graf je ohodnocen√Ω")
        if has_node_weights:
            print(f"     ‚Üí Uzly maj√≠ ohodnocen√≠")
        if has_edge_weights:
            print(f"     ‚Üí Hrany maj√≠ v√°hy")
    else:
        print(f"   ‚úó NE - Graf nen√≠ ohodnocen√Ω (≈æ√°dn√© v√°hy)")
    
    # b) Orientovan√Ω
    print(f"\nb) ORIENTOVAN√ù (smƒõrovan√Ω):")
    directed_edges = [e for e in graph.edges if e.directed]
    undirected_edges = [e for e in graph.edges if not e.directed]
    
    if len(directed_edges) == len(graph.edges):
        print(f"   ‚úì ANO - Orientovan√Ω graf (v≈°echny hrany maj√≠ smƒõr)")
    elif len(undirected_edges) == len(graph.edges):
        print(f"   ‚úó NE - Neorientovan√Ω graf (v≈°echny hrany bez smƒõru)")
    else:
        print(f"   ‚ö† ƒå√ÅSTEƒåNƒö - Sm√≠≈°en√Ω graf (obsahuje orientovan√© i neorientovan√© hrany)")
    
    # c) Souvisl√Ω
    print(f"\nc) SOUVISL√ù (spojit√Ω):")
    is_connected = check_connected(graph)
    if is_connected:
        print(f"   ‚úì ANO - Graf je souvisl√Ω")
        print(f"     ‚Üí Existuje cesta mezi ka≈æd√Ωmi dvƒõma uzly")
    else:
        print(f"   ‚úó NE - Graf nen√≠ souvisl√Ω")
        isolated = get_isolated_nodes(graph)
        if isolated:
            print(f"     ‚Üí Izolovan√© uzly: {isolated}")
    
    # d) Prost√Ω
    print(f"\nd) PROST√ù (bez n√°sobn√Ωch hran):")
    has_multiple = has_multiple_edges(graph)
    if not has_multiple:
        print(f"   ‚úì ANO - Prost√Ω graf (bez n√°sobn√Ωch hran)")
        print(f"     ‚Üí Mezi ka≈æd√Ωmi dvƒõma uzly max. 1 hrana")
    else:
        print(f"   ‚úó NE - Multigraf (obsahuje n√°sobn√© hrany)")
    
    # e) Jednoduch√Ω
    print(f"\ne) JEDNODUCH√ù (bez smyƒçek a n√°sobn√Ωch hran):")
    loops = get_loops(graph)
    if not has_multiple and not loops:
        print(f"   ‚úì ANO - Jednoduch√Ω graf")
        print(f"     ‚Üí Bez smyƒçek a n√°sobn√Ωch hran")
    else:
        print(f"   ‚úó NE - Nen√≠ jednoduch√Ω graf")
        if loops:
            print(f"     ‚Üí Obsahuje {len(loops)} smyƒçek")
        if has_multiple:
            print(f"     ‚Üí Obsahuje n√°sobn√© hrany")
    
    # f) Rovinn√Ω
    print(f"\nf) ROVINN√ù (plan√°rn√≠):")
    print(f"   ? NELZE AUTOMATICKY URƒåIT")
    print(f"     ‚Üí Rovinnost je NP-√∫pln√Ω probl√©m")
    print(f"     ‚Üí Pro mal√© grafy: zkuste nakreslit bez k≈ô√≠≈æen√≠ hran")
    if len(graph.nodes) <= 4:
        print(f"     ‚Üí Graf s max 4 uzly je v≈ædy rovinn√Ω")
    
    # g) Koneƒçn√Ω
    print(f"\ng) KONEƒåN√ù:")
    print(f"   ‚úì ANO - Graf je koneƒçn√Ω")
    print(f"     ‚Üí M√° koneƒçn√Ω poƒçet uzl≈Ø ({len(graph.nodes)}) a hran ({len(graph.edges)})")
    
    # h) √öpln√Ω
    print(f"\nh) √öPLN√ù (kompletn√≠, K_n):")
    is_complete = check_complete(graph)
    if is_complete:
        print(f"   ‚úì ANO - √öpln√Ω graf")
        print(f"     ‚Üí Ka≈æd√Ω uzel je spojen se v≈°emi ostatn√≠mi")
        if len(undirected_edges) == len(graph.edges):
            expected = len(graph.nodes) * (len(graph.nodes) - 1) // 2
            print(f"     ‚Üí Pro {len(graph.nodes)} uzl≈Ø: {expected} hran (K_{len(graph.nodes)})")
    else:
        print(f"   ‚úó NE - Nen√≠ √∫pln√Ω graf")
    
    # i) Regul√°rn√≠
    print(f"\ni) REGUL√ÅRN√ç (pravideln√Ω):")
    regularity = check_regular(graph)
    if regularity is not None:
        print(f"   ‚úì ANO - Regul√°rn√≠ graf stupnƒõ {regularity}")
        print(f"     ‚Üí V≈°echny uzly maj√≠ stupe≈à {regularity}")
    else:
        print(f"   ‚úó NE - Nen√≠ regul√°rn√≠ graf")
        degrees = [get_degree(graph, node) for node in graph.nodes]
        print(f"     ‚Üí Stupnƒõ uzl≈Ø: min={min(degrees)}, max={max(degrees)}")
    
    # j) Bipartitn√≠
    print(f"\nj) BIPARTITN√ç (2-barevn√Ω):")
    is_bip, partition = check_bipartite(graph)
    if is_bip:
        print(f"   ‚úì ANO - Bipartitn√≠ graf")
        if partition:
            set1, set2 = partition
            print(f"     ‚Üí Partice 1 ({len(set1)} uzl≈Ø): {sorted(set1)}")
            print(f"     ‚Üí Partice 2 ({len(set2)} uzl≈Ø): {sorted(set2)}")
    else:
        print(f"   ‚úó NE - Nen√≠ bipartitn√≠ graf")
        print(f"     ‚Üí Nelze rozdƒõlit do dvou mno≈æin bez hran uvnit≈ô")
    
    # k) Acyklick√Ω
    print(f"\nk) ACYKLICK√ù (bez cykl≈Ø):")
    is_acyclic = check_acyclic(graph)
    if is_acyclic:
        print(f"   ‚úì ANO - Acyklick√Ω graf")
        print(f"     ‚Üí Neobsahuje ≈æ√°dn√© cykly")
    else:
        print(f"   ‚úó NE - Obsahuje cykly")
        cycles = find_cycles(graph)
        if cycles:
            print(f"     ‚Üí Nalezeno {len(cycles)} cykl≈Ø")
    
    # l) Strom
    print(f"\nl) STROM (souvisl√Ω acyklick√Ω):")
    is_tree = check_tree(graph)
    if is_tree:
        print(f"   ‚úì ANO - Strom")
        print(f"     ‚Üí Souvisl√Ω a acyklick√Ω graf")
        print(f"     ‚Üí n uzl≈Ø, n-1 hran")
    else:
        print(f"   ‚úó NE - Nen√≠ strom")
        if not check_connected(graph):
            print(f"     ‚Üí Nen√≠ souvisl√Ω")
        if not is_acyclic:
            print(f"     ‚Üí Obsahuje cykly")
    
    # m) Les
    print(f"\nm) LES (sjednocen√≠ strom≈Ø):")
    is_forest = check_forest(graph)
    if is_forest:
        print(f"   ‚úì ANO - Les")
        print(f"     ‚Üí Acyklick√Ω graf (sjednocen√≠ strom≈Ø)")
        components = get_connected_components(graph)
        print(f"     ‚Üí Obsahuje {len(components)} komponent")
    else:
        print(f"   ‚úó NE - Nen√≠ les")
        print(f"     ‚Üí Obsahuje cykly")
    
    # Interaktivn√≠ anal√Ωza uzl≈Ø
    print(f"\n" + "="*80)
    print("ANAL√ùZA KONKR√âTN√çCH UZL≈Æ")
    print("="*80)
    
    while True:
        print(f"\nüìã Dostupn√© uzly: {sorted(graph.nodes.keys())}")
        print(f"\nVyberte uzel pro anal√Ωzu (nebo 'konec' pro ukonƒçen√≠):")
        node = input("üìç Uzel: ").strip()
        
        if node.lower() in ['konec', 'exit', 'q', '']:
            break
        
        if node not in graph.nodes:
            print(f"‚ùå Uzel '{node}' neexistuje!")
            continue
        
        analyze_single_node(graph, node)


def analyze_single_node(graph: Graph, node: str):
    """Analyzuje konkr√©tn√≠ uzel"""
    print(f"\n{'='*60}")
    print(f"ANAL√ùZA UZLU: {node}")
    print(f"{'='*60}")
    
    # a) N√°sledn√≠ci uzlu
    successors = get_successors(graph, node)
    print(f"\na) N√ÅSLEDN√çCI uzlu {node}:")
    if successors:
        print(f"   ‚úì {successors}")
        print(f"     ‚Üí Uzly, do kter√Ωch vede hrana Z uzlu {node}")
    else:
        print(f"   ‚úó ≈Ω√°dn√≠ n√°sledn√≠ci")
        print(f"     ‚Üí Z uzlu {node} nevede ≈æ√°dn√° hrana")
    
    # b) P≈ôedch≈Ødci uzlu
    predecessors = get_predecessors(graph, node)
    print(f"\nb) P≈òEDCH≈ÆDCI uzlu {node}:")
    if predecessors:
        print(f"   ‚úì {predecessors}")
        print(f"     ‚Üí Uzly, ze kter√Ωch vede hrana DO uzlu {node}")
    else:
        print(f"   ‚úó ≈Ω√°dn√≠ p≈ôedch≈Ødci")
        print(f"     ‚Üí Do uzlu {node} nevede ≈æ√°dn√° hrana")
    
    # c) Soused√© uzlu
    neighbors = get_neighbors(graph, node)
    print(f"\nc) SOUSED√â uzlu {node}:")
    if neighbors:
        print(f"   ‚úì {neighbors}")
        print(f"     ‚Üí V≈°echny uzly spojen√© hranou s uzlem {node}")
    else:
        print(f"   ‚úó ≈Ω√°dn√≠ soused√©")
        print(f"     ‚Üí Uzel {node} je izolovan√Ω")
    
    # d) V√Ωstupn√≠ okol√≠ uzlu
    out_neighborhood = get_out_neighborhood(graph, node)
    print(f"\nd) V√ùSTUPN√ç OKOL√ç uzlu {node}:")
    if out_neighborhood:
        print(f"   ‚úì {out_neighborhood}")
        print(f"     ‚Üí Mno≈æina v≈°ech n√°sledn√≠k≈Ø uzlu {node}")
    else:
        print(f"   ‚úó Pr√°zdn√© v√Ωstupn√≠ okol√≠")
        print(f"     ‚Üí Z uzlu {node} nevede ≈æ√°dn√° hrana")
    
    # e) Vstupn√≠ okol√≠ uzlu
    in_neighborhood = get_in_neighborhood(graph, node)
    print(f"\ne) VSTUPN√ç OKOL√ç uzlu {node}:")
    if in_neighborhood:
        print(f"   ‚úì {in_neighborhood}")
        print(f"     ‚Üí Mno≈æina v≈°ech p≈ôedch≈Ødc≈Ø uzlu {node}")
    else:
        print(f"   ‚úó Pr√°zdn√© vstupn√≠ okol√≠")
        print(f"     ‚Üí Do uzlu {node} nevede ≈æ√°dn√° hrana")
    
    # f) Okol√≠ uzlu (sjednocen√≠ vstupn√≠ho a v√Ωstupn√≠ho)
    all_neighborhood = get_all_neighborhood(graph, node)
    print(f"\nf) OKOL√ç uzlu {node} (v≈°ichni soused√©):")
    if all_neighborhood:
        print(f"   ‚úì {all_neighborhood}")
        print(f"     ‚Üí Sjednocen√≠ vstupn√≠ho a v√Ωstupn√≠ho okol√≠")
    else:
        print(f"   ‚úó Pr√°zdn√© okol√≠")
        print(f"     ‚Üí Uzel {node} je izolovan√Ω")
    
    # g) V√Ωstupn√≠ stupe≈à uzlu
    out_degree = get_out_degree(graph, node)
    print(f"\ng) V√ùSTUPN√ç STUPE≈á uzlu {node}:")
    print(f"   ‚úì {out_degree}")
    print(f"     ‚Üí Poƒçet hran vych√°zej√≠c√≠ch z uzlu {node}")
    
    # h) Vstupn√≠ stupe≈à uzlu
    in_degree = get_in_degree(graph, node)
    print(f"\nh) VSTUPN√ç STUPE≈á uzlu {node}:")
    print(f"   ‚úì {in_degree}")
    print(f"     ‚Üí Poƒçet hran vstupuj√≠c√≠ch do uzlu {node}")
    
    # i) Celkov√Ω stupe≈à uzlu
    total_degree = get_total_degree(graph, node)
    print(f"\ni) CELKOV√ù STUPE≈á uzlu {node}:")
    print(f"   ‚úì {total_degree}")
    print(f"     ‚Üí Souƒçet vstupn√≠ho a v√Ωstupn√≠ho stupnƒõ")
    
    # Dodateƒçn√© informace
    print(f"\nüìä DODATEƒåN√â INFORMACE:")
    print(f"   ‚Ä¢ Vstupn√≠ stupe≈à: {in_degree}")
    print(f"   ‚Ä¢ V√Ωstupn√≠ stupe≈à: {out_degree}")
    print(f"   ‚Ä¢ Celkov√Ω stupe≈à: {total_degree}")
    print(f"   ‚Ä¢ Poƒçet soused≈Ø: {len(neighbors)}")
    
    if in_degree == 0 and out_degree > 0:
        print(f"   ‚Ä¢ Typ uzlu: ZDROJ (source)")
    elif out_degree == 0 and in_degree > 0:
        print(f"   ‚Ä¢ Typ uzlu: STOK (sink)")
    elif in_degree == 0 and out_degree == 0:
        print(f"   ‚Ä¢ Typ uzlu: IZOLOVAN√ù")
    else:
        print(f"   ‚Ä¢ Typ uzlu: OBECN√ù")


def get_successors(graph: Graph, node: str) -> List[str]:
    """Vr√°t√≠ seznam n√°sledn√≠k≈Ø uzlu"""
    successors = []
    for edge in graph.edges:
        if edge.from_node == node:
            successors.append(edge.to_node)
    return sorted(list(set(successors)))


def get_predecessors(graph: Graph, node: str) -> List[str]:
    """Vr√°t√≠ seznam p≈ôedch≈Ødc≈Ø uzlu"""
    predecessors = []
    for edge in graph.edges:
        if edge.to_node == node:
            predecessors.append(edge.from_node)
    return sorted(list(set(predecessors)))


def get_neighbors(graph: Graph, node: str) -> List[str]:
    """Vr√°t√≠ seznam v≈°ech soused≈Ø uzlu"""
    neighbors = set()
    for edge in graph.edges:
        if edge.from_node == node:
            neighbors.add(edge.to_node)
        elif edge.to_node == node:
            neighbors.add(edge.from_node)
    return sorted(list(neighbors))


def get_out_neighborhood(graph: Graph, node: str) -> List[str]:
    """Vr√°t√≠ v√Ωstupn√≠ okol√≠ uzlu (n√°sledn√≠ci)"""
    return get_successors(graph, node)


def get_in_neighborhood(graph: Graph, node: str) -> List[str]:
    """Vr√°t√≠ vstupn√≠ okol√≠ uzlu (p≈ôedch≈Ødci)"""
    return get_predecessors(graph, node)


def get_all_neighborhood(graph: Graph, node: str) -> List[str]:
    """Vr√°t√≠ okol√≠ uzlu (v≈°ichni soused√©)"""
    return get_neighbors(graph, node)


def get_out_degree(graph: Graph, node: str) -> int:
    """Vr√°t√≠ v√Ωstupn√≠ stupe≈à uzlu"""
    count = 0
    for edge in graph.edges:
        if edge.from_node == node:
            count += 1
    return count


def get_in_degree(graph: Graph, node: str) -> int:
    """Vr√°t√≠ vstupn√≠ stupe≈à uzlu"""
    count = 0
    for edge in graph.edges:
        if edge.to_node == node:
            count += 1
    return count


def get_total_degree(graph: Graph, node: str) -> int:
    """Vr√°t√≠ celkov√Ω stupe≈à uzlu"""
    return get_in_degree(graph, node) + get_out_degree(graph, node)


def check_connected(graph: Graph) -> bool:
    """Zkontroluje, zda je graf souvisl√Ω"""
    if not graph.nodes:
        return True
    
    # BFS pro neorientovan√Ω graf
    start_node = list(graph.nodes.keys())[0]
    visited = set()
    queue = [start_node]
    
    while queue:
        node = queue.pop(0)
        if node in visited:
            continue
        visited.add(node)
        
        # Naj√≠t v≈°echny sousedn√≠ uzly
        for edge in graph.edges:
            if edge.from_node == node and edge.to_node not in visited:
                queue.append(edge.to_node)
            elif edge.to_node == node and edge.from_node not in visited:
                queue.append(edge.from_node)
    
    return len(visited) == len(graph.nodes)


def get_isolated_nodes(graph: Graph) -> List[str]:
    """Vr√°t√≠ seznam izolovan√Ωch uzl≈Ø"""
    isolated = []
    for node in graph.nodes:
        has_edges = any(edge.from_node == node or edge.to_node == node for edge in graph.edges)
        if not has_edges:
            isolated.append(node)
    return isolated


def has_multiple_edges(graph: Graph) -> bool:
    """Zkontroluje, zda m√° graf n√°sobn√© hrany"""
    edge_pairs = set()
    for edge in graph.edges:
        # Normalizovat hranu pro neorientovan√© grafy
        if not edge.directed:
            pair = tuple(sorted([edge.from_node, edge.to_node]))
        else:
            pair = (edge.from_node, edge.to_node)
        
        if pair in edge_pairs:
            return True
        edge_pairs.add(pair)
    
    return False


def get_loops(graph: Graph) -> List[Edge]:
    """Vr√°t√≠ seznam smyƒçek"""
    loops = []
    for edge in graph.edges:
        if edge.from_node == edge.to_node:
            loops.append(edge)
    return loops


def check_complete(graph: Graph) -> bool:
    """Zkontroluje, zda je graf √∫pln√Ω"""
    if len(graph.nodes) <= 1:
        return True
    
    # Pro neorientovan√Ω graf
    undirected_edges = [e for e in graph.edges if not e.directed]
    if len(undirected_edges) == len(graph.edges):
        expected_edges = len(graph.nodes) * (len(graph.nodes) - 1) // 2
        return len(undirected_edges) == expected_edges
    
    # Pro orientovan√Ω graf
    directed_edges = [e for e in graph.edges if e.directed]
    if len(directed_edges) == len(graph.edges):
        expected_edges = len(graph.nodes) * (len(graph.nodes) - 1)
        return len(directed_edges) == expected_edges
    
    return False


def get_degree(graph: Graph, node: str) -> int:
    """Vr√°t√≠ stupe≈à uzlu"""
    degree = 0
    for edge in graph.edges:
        if edge.from_node == node or edge.to_node == node:
            degree += 1
    return degree


def is_directed(graph: Graph) -> bool:
    """Zkontroluje, zda je graf orientovan√Ω"""
    for edge in graph.edges:
        if edge.directed:
            return True
    return False


def check_regular(graph: Graph) -> Optional[int]:
    """Zkontroluje, zda je graf regul√°rn√≠"""
    if not graph.nodes:
        return None
    
    # Pro orientovan√© grafy: zkontrolovat vstupn√≠ a v√Ωstupn√≠ stupnƒõ
    if is_directed(graph):
        in_degrees = [get_in_degree(graph, node) for node in graph.nodes]
        out_degrees = [get_out_degree(graph, node) for node in graph.nodes]
        
        # V≈°echny uzly mus√≠ m√≠t stejn√Ω vstupn√≠ i v√Ωstupn√≠ stupe≈à
        if (all(d == in_degrees[0] for d in in_degrees) and 
            all(d == out_degrees[0] for d in out_degrees)):
            return in_degrees[0]  # Vr√°t√≠ stupe≈à
        return None
    else:
        # Pro neorientovan√© grafy: celkov√Ω stupe≈à
        degrees = [get_degree(graph, node) for node in graph.nodes]
        if all(d == degrees[0] for d in degrees):
            return degrees[0]
        return None


def check_bipartite(graph: Graph) -> Tuple[bool, Optional[Tuple[Set[str], Set[str]]]]:
    """Zkontroluje, zda je graf bipartitn√≠"""
    if not graph.nodes:
        return True, (set(), set())
    
    # BFS s barven√≠m
    colors = {}
    queue = []
    
    # Zaƒç√≠t s prvn√≠m uzlem
    start_node = list(graph.nodes.keys())[0]
    colors[start_node] = 0
    queue.append(start_node)
    
    while queue:
        node = queue.pop(0)
        current_color = colors[node]
        
        # Naj√≠t sousedn√≠ uzly
        for edge in graph.edges:
            neighbor = None
            if edge.from_node == node:
                neighbor = edge.to_node
            elif edge.to_node == node:
                neighbor = edge.from_node
            
            if neighbor is not None:
                if neighbor not in colors:
                    colors[neighbor] = 1 - current_color
                    queue.append(neighbor)
                elif colors[neighbor] == current_color:
                    return False, None
    
    # Rozdƒõlit do dvou mno≈æin podle barev
    set1 = {node for node, color in colors.items() if color == 0}
    set2 = {node for node, color in colors.items() if color == 1}
    
    return True, (set1, set2)




def check_acyclic(graph: Graph) -> bool:
    """Zkontroluje, zda je graf acyklick√Ω (neobsahuje cykly)"""
    if not graph.nodes:
        return True
    
    # DFS pro detekci cykl≈Ø
    visited = set()
    rec_stack = set()
    
    def has_cycle_dfs(node):
        visited.add(node)
        rec_stack.add(node)
        
        # Naj√≠t v≈°echny sousedn√≠ uzly
        for edge in graph.edges:
            neighbor = None
            if edge.from_node == node:
                neighbor = edge.to_node
            elif edge.to_node == node:
                neighbor = edge.from_node
            
            if neighbor is not None:
                if neighbor not in visited:
                    if has_cycle_dfs(neighbor):
                        return True
                elif neighbor in rec_stack:
                    return True
        
        rec_stack.remove(node)
        return False
    
    # Zkontrolovat v≈°echny komponenty
    for node in graph.nodes:
        if node not in visited:
            if has_cycle_dfs(node):
                return False
    
    return True


def find_cycles(graph: Graph) -> List[List[str]]:
    """Najde v≈°echny cykly v grafu"""
    cycles = []
    if not graph.nodes:
        return cycles
    
    visited = set()
    rec_stack = set()
    path = []
    
    def find_cycles_dfs(node, parent):
        visited.add(node)
        rec_stack.add(node)
        path.append(node)
        
        # Naj√≠t v≈°echny sousedn√≠ uzly
        for edge in graph.edges:
            neighbor = None
            if edge.from_node == node:
                neighbor = edge.to_node
            elif edge.to_node == node:
                neighbor = edge.from_node
            
            if neighbor is not None and neighbor != parent:
                if neighbor not in visited:
                    find_cycles_dfs(neighbor, node)
                elif neighbor in rec_stack:
                    # Na≈°li jsme cyklus
                    cycle_start = path.index(neighbor)
                    cycle = path[cycle_start:] + [neighbor]
                    cycles.append(cycle)
        
        rec_stack.remove(node)
        path.pop()
    
    # Zkontrolovat v≈°echny komponenty
    for node in graph.nodes:
        if node not in visited:
            find_cycles_dfs(node, None)
    
    return cycles


def check_tree(graph: Graph) -> bool:
    """Zkontroluje, zda je graf strom"""
    if not graph.nodes:
        return True
    
    # Strom je souvisl√Ω a acyklick√Ω
    return check_connected(graph) and check_acyclic(graph)


def check_forest(graph: Graph) -> bool:
    """Zkontroluje, zda je graf les (sjednocen√≠ strom≈Ø)"""
    if not graph.nodes:
        return True
    
    # Les je acyklick√Ω (nemus√≠ b√Ωt souvisl√Ω)
    return check_acyclic(graph)


def get_connected_components(graph: Graph) -> List[Set[str]]:
    """Vr√°t√≠ seznam souvisl√Ωch komponent"""
    if not graph.nodes:
        return []
    
    visited = set()
    components = []
    
    def dfs_component(node, component):
        visited.add(node)
        component.add(node)
        
        # Naj√≠t v≈°echny sousedn√≠ uzly
        for edge in graph.edges:
            neighbor = None
            if edge.from_node == node:
                neighbor = edge.to_node
            elif edge.to_node == node:
                neighbor = edge.from_node
            
            if neighbor is not None and neighbor not in visited:
                dfs_component(neighbor, component)
    
    for node in graph.nodes:
        if node not in visited:
            component = set()
            dfs_component(node, component)
            components.append(component)
    
    return components
